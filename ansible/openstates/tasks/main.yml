---
- name: add deadsnakes repo for Py 3.9
  apt_repository:
    repo: ppa:deadsnakes/ppa

- name: install system packages
  apt:
    update_cache: yes
    pkg:
      - build-essential
      - git
      - libpq-dev
      - gdal-bin
      - uwsgi
      - uwsgi-src
      - nginx
      - libgdal-dev
      - certbot
      - python3-certbot-nginx
      - python3.9
      - python3.9-dev
      - python3.9-distutils

- name: build python39 plugin
  command: uwsgi --build-plugin "/usr/src/uwsgi/plugins/python python39"
  environment:
    PYTHON: python3.9
  args:
    creates: /usr/lib/uwsgi/plugins/python39_plugin.so
    chdir: /usr/lib/uwsgi/plugins/
  changed_when: false

- name: add localhost alias
  lineinfile:
    dest: /etc/hosts
    line: '127.0.0.1 openstates.org'

- name: add pgpass file
  template:
    src: pgpass.j2
    dest: /home/ubuntu/.pgpass
    mode: 600

# user home directory
- name: make project dir
  file:
    path: /home/openstates
    state: directory

- name: add project user
  user:
    name: openstates
    home: /home/openstates
    shell: /bin/bash
    state: present

- name: chown user directory
  file:
    path: /home/openstates
    owner: openstates

- name: add env_vars for project user
  template:
    src: env_vars.j2
    dest: /home/openstates/env_vars
    mode: 640
  become_user: "openstates"

- name: copy robots.txt
  copy:
    src: files/robots.txt
    dest: /home/openstates/robots.txt
    mode: 644

# node
- name: download nodesource script
  get_url:
    url: https://deb.nodesource.com/setup_14.x
    dest: /tmp/nodesource-setup.sh
    mode: 0770

- name: run nodesource script
  command: /tmp/nodesource-setup.sh
  changed_when: false

- name: install nodejs
  apt:
    pkg:
      - nodejs

- name: get pip
  get_url:
    url: https://bootstrap.pypa.io/get-pip.py
    dest: /tmp/get-pip.py

- name: install pip
  command: python3.9 /tmp/get-pip.py
  become_user: "openstates"
  changed_when: false

- name: install poetry
  command: python3.9 -m pip install --upgrade poetry virtualenv
  become_user: "openstates"
  changed_when: false

# letsencrypt & cronjobs

- name: add letsencrypt cert
  command: certbot run --nginx --expand -d open.pluralpolicy.com --email contact@openstates.org --agree-tos -n --keep
  changed_when: false

- name: add letsencrypt renewal crontab
  cron:
    job: "letsencrypt renew"
    special_time: "daily"
    name: "renew certificate"

- name: add process_subscriptions cron
  cron:
    job: ". /home/openstates/env_vars && /home/openstates/virt/bin/python /home/openstates/src/openstates.org/manage.py process_subscriptions >> /tmp/subscriptions.log"
    hour: "12"
    minute: "30"
    name: "process subscriptions"

- name: add aggregate usage cron
  cron:
    job: ". /home/openstates/env_vars && /home/openstates/virt/bin/python /home/openstates/src/openstates.org/manage.py aggregate_api_usage /var/log/uwsgi/app/openstates.log /var/log/uwsgi/app/openstates.log.1 >> /tmp/aggregation.log"
    hour: "*/2"
    minute: "19"
    name: "aggregate usage"

- name: restart nginx weekly
  cron:
    job: "systemctl restart nginx"
    special_time: "weekly"
    name: "restart nginx"

- name: archive letsencrypt stuff
  cron:
    job: 'bash -c "tar cvf /tmp/newle$(date +\%Y\%m\%d).gz /etc/letsencrypt/ && aws s3 cp /tmp/newle$(date +\%Y\%m\%d).gz s3://openstates-backups/letsencrypt/ && rm /tmp/newle$(date +\%Y\%m\%d).gz"'
    special_time: "monthly"
    name: "backup letsencrypt"

# virtualenv
- name: checkout project directories
  git:
    repo: https://github.com/openstates/openstates.org.git
    dest: /home/openstates/src/openstates.org
    accept_hostkey: yes
    version: main
  become_user: "openstates"
  notify:
    - restart django-application
  register: gitresult

- name: create virtualenv
  command: python3.9 -m virtualenv /home/openstates/virt{{ gitresult.after }}
  become_user: "openstates"
  changed_when: false
  notify:
    - restart django-application

- name: add checkouts to python path
  lineinfile:
    dest: "/home/openstates/virt{{ gitresult.after }}/lib/python3.9/site-packages/checkouts.pth"
    create: yes
    state: present
    line: /home/openstates/src/openstates.org

  become_user: "openstates"
- name: install packages via poetry
  command: python3.9 -m poetry install --no-root # --deploy
  changed_when: false
  args:
    chdir: /home/openstates/src/openstates.org
  environment:
    VIRTUAL_ENV: /home/openstates/virt{{ gitresult.after }}
  become_user: "openstates"

- name: link virtualenv
  file:
    src: "/home/openstates/virt{{ gitresult.after }}"
    dest: /home/openstates/virt
    state: link
  notify:
    - restart django-application

# npm installation & build
- name: npm install
  command: npm ci   # use this to ensure we only build from package-lock
  changed_when: false
  become_user: "openstates"
  args:
    chdir: /home/openstates/src/openstates.org

- name: npm run build
  command: npm run build
  become_user: "openstates"
  changed_when: false
  args:
    chdir: /home/openstates/src/openstates.org

# nginx
- name: make certs dir
  file:
    path: /etc/nginx/certs/
    state: directory

- name: generate dh params
  command: openssl dhparam -out /etc/nginx/certs/dhparams.pem 2048 creates=/etc/nginx/certs/dhparams.pem
  changed_when: false

- name: remove nginx default config
  file:
    path: /etc/nginx/sites-enabled/default
    state: absent

- name: write nginx template
  template:
    src: nginx.j2
    dest: /etc/nginx/sites-enabled/openstates
  notify:
    - restart nginx

- name: ensure nginx is running and starts on boot
  service:
    name: nginx
    state: restarted
    enabled: yes

# django commands
- name: collectstatic
  command: /home/openstates/virt/bin/python manage.py collectstatic --settings=web.settings --noinput chdir=/home/openstates/src/openstates.org
  environment: '{{django_environment}}'
  changed_when: false

- name: migrate
  command: /home/openstates/virt/bin/python manage.py migrate --settings=web.settings --noinput chdir=/home/openstates/src/openstates.org
  environment: '{{django_environment}}'
  changed_when: false

- name: create Site
  command: echo "from django.contrib.sites.models import Site;Site.objects.get_or_create(domain='openstates.org', name='openstates.org')" | /home/openstates/virt/bin/python manage.py shell --settings=web.settings chdir=/home/openstates/src/openstates.org
  environment: '{{django_environment}}'
  changed_when: false

# TODO: add run of shapefiles/download.py
# - name: loadshapefiles
#   command: /home/openstates/virt/bin/python manage.py loadshapefiles --settings=web.settings chdir=/home/openstates/src/openstates.org
#   environment: '{{django_environment}}'
# - name: loadmappings
#   command: /home/openstates/virt/bin/python manage.py loadmappings --settings=web.settings chdir=/home/openstates/src/openstates.org
#   environment: '{{django_environment}}'

# uwsgi
- name: write uwsgi template
  template:
    src: uwsgi.j2
    dest: /etc/uwsgi/apps-enabled/openstates.ini
  notify:
    - restart django-application

- name: start uwsgi
  service:
    name: uwsgi
    state: started
